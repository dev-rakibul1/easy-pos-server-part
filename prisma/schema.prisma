// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                    String      @id @default(uuid())
  firstName             String
  middleName            String?
  lastName              String
  email                 String      @unique
  phoneNo               String      @unique
  gender                String?
  nid                   String?
  presentAddress        String?
  permanentAddress      String?
  profileImage          String?
  role                  UserRole @default(user)
  password              String
  uniqueId              String      @unique

  purchases             Purchase[]
  sells                 Sells[]
  supplierPayment       SupplierPayment[]
  customerPayment       CustomerPayments[]
  
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  @@map("users")
}

model Product {
  id            String     @id @default(uuid())
  productName   String
  brandName     String
  modelName     String
  processor     String?
  unit          String
  category      String
  reOrderAlert  Int
  productImage  String?
  description   String?
  uniqueId      String?
  productStock  Int?
  othersStock   Int?
  variants      Variants[]
  purchases     Purchase[]
  

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("products")
}

model Variants {
  id            String     @id @default(uuid())
  imeiNumber    String
  ram           String?
  rom           String?
  color         String?

  productId     String
  product       Product    @relation(fields: [productId], references: [id])

  status        String     @default("available")
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("variants")
}



model SupplierPayment {
  id                   String  @id @default(uuid())
  totalPay             Int
  totalDue             Int
  totalSellPrice       Int
  uniqueId             String

  supplierId           String
  supplier             Suppliers @relation(fields: [supplierId], references: [id])

  userId               String  
  user                 User     @relation(fields: [userId], references: [id])

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("supplierPayments")
}

model Suppliers {
  id                  String  @id @default(uuid())
  firstName           String
  middleName          String?
  lastName            String
  email               String      @unique
  phoneNo             String      @unique
  gender              String?
  nid                 String?
  presentAddress      String?
  permanentAddress    String?
  profileImage        String?
  uniqueId            String      @unique
  status              Boolean?     @default(false)
  payments            SupplierPayment[]
  purchase            Purchase[]
  returnHistory       Returns[]


  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@map("suppliers")
}

model Returns {
  id                    String  @id @default(uuid())
  productName           String
  modelName             String
  uniqueId              String
  imeiNumber            String
  ram                   String
  rom                   String
  color                 String
  purchaseRate          Int
  sellingPrice          Int
  vats                  Int
  discounts             Int
  variantId             String
  userId                String
  productId             String

  supplierId            String
  supplier              Suppliers  @relation(fields: [supplierId], references: [id])

  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  @@map("returns")
}

model Purchase {
  id                    String  @id @default(uuid())
  purchaseRate          Float
  sellingPrice          Float
  discounts             Float
  vats                  Float
  totalPrice            Float
  productStock          Int?
  othersStock           Int?
  color                 String
  uniqueId              String
  ram                   String
  room                  String

  supplierId            String
  suppliers             Suppliers @relation(fields: [supplierId], references: [id])

  userId                String
  users                 User @relation(fields: [userId], references: [id])


  productId             String
  products              Product @relation(fields: [productId], references: [id])

  additionalPurchaseId  String?
  additionalPurchase    AdditionalProductPurchase? @relation(fields: [additionalPurchaseId], references: [id])

  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  @@map("purchases")
}

model AdditionalProductPurchase {
  id                      String @id  @default(uuid())
  additionalPurchase      Purchase[]

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("additionalProductPurchases")
}

model Sells {
  id                String  @id  @default(uuid())
  productName       String
  modelName         String
  vats              Int
  discounts         Int
  sellingPrice      Int
  paymentMethod     String
  totalPay          Int
  totalSellPrice    Int
  uniqueId          String

  variantId         String
  
  sellVariantId     String
  sellVariant       SellVariants  @relation(fields: [sellVariantId], references: [id])

  userId            String
  user              User @relation(fields: [userId], references: [id])

  customerId        String
  customer          Customers @relation(fields: [customerId], references: [id])

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@map("sells")
}

model SellVariants {
  id                  String  @id  @default(uuid())
  imeiNumber          String
  ram                 String
  rom                 String
  color               String
  purchaseRate        Int
  sellingPrice        Int
  vats                Int
  discounts           Int
  sells               Sells[]
  

  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  
  @@map("sellvariants")
}

model Customers {
  id                  String  @id @default(uuid())
  firstName           String
  middleName          String?
  lastName            String
  email               String      @unique
  phoneNo             String      @unique
  nid                 String?
  presentAddress      String?
  permanentAddress    String?
  profileImage        String?
  uniqueId            String
  purchaseHistory     Sells[]
  payments            CustomerPayments[]

  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@map("customers")
}


model CustomerPayments {
  id                   String  @id @default(uuid())
  totalPay             Int
  totalDue             Int
  totalSellPrice       Int
  uniqueId             String

  customerId           String
  customer             Customers @relation(fields: [customerId], references: [id])

  userId               String  
  user                 User     @relation(fields: [userId], references: [id])

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("customerPayments")
}

model Vats {
  id                   String  @id @default(uuid())

  name                 String
  vatType              String
  vatValue             Float
  uniqueId             String

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("vats")
}

model Discounts {
  id                   String  @id @default(uuid())

  name                 String
  discountType         String
  discountValue        Float
  uniqueId             String

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("discounts")
}

model Brands {
  id                   String  @id @default(uuid())

  brandName            String
  description          String?
  uniqueId             String     @unique

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("brands")
}
model Units {
  id                   String  @id @default(uuid())

  unitName            String

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("units")
}
model Categorys {
  id                   String  @id @default(uuid())

  categoryName         String

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("categories")
}

model Colors {
  id                   String  @id @default(uuid())

  name                 String
  colorCode            String?
  uniqueId             String

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("colors")
}

model CurrencyType {
  id                   String  @id @default(uuid())

  currencyName                 String
  uniqueId             String

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("currencyType")
}


// Enum value
enum UserRole {
  super_admin        
  admin
  user
  moderator
  content_manager    
  marketing_manager  
}