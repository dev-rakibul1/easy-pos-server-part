

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER TABLE
model User {
  id                    String      @id @default(uuid())
  firstName             String
  middleName            String?
  lastName              String
  email                 String      @unique
  phoneNo               String      @unique
  gender                String?
  nid                   String?
  presentAddress        String?
  permanentAddress      String?
  profileImage          String?
  role                  UserRole @default(user)
  password              String
  uniqueId              String      @unique
  status                Boolean @default(true)

  purchases             Purchase[]
  sells                 Sells[]
  supplierPayment       SupplierPayment[]
  customerPayment       CustomerPayments[]
  supplierReturnPayments SupplierReturnPayments[]

  supplierSell          SupplierSell[]
  
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  @@map("users")
}




model SupplierPayment {
  id                   String  @id @default(uuid())
  totalPay             Int
  totalDue             Int
  totalSellPrice       Int
  uniqueId             String
  paymentType          String?

  supplierId           String
  supplier             Suppliers @relation(fields: [supplierId], references: [id])

  userId               String  
  user                 User     @relation(fields: [userId], references: [id])

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("supplierPayments")
}

model Suppliers {
  id                  String  @id @default(uuid())
  firstName           String
  middleName          String?
  lastName            String
  email               String      @unique
  phoneNo             String      @unique
  gender              String?
  nid                 String?
  presentAddress      String?
  permanentAddress    String?
  profileImage        String?
  uniqueId            String      @unique
  status              Boolean?     @default(false)
  payments            SupplierPayment[]
  purchase            Purchase[]
  returnHistory       Returns[]

  supplierSell        SupplierSell[]

  supplierSellProducts SupplierSellProduct[]


  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@map("suppliers")
}

//--------RETURN GROUP & RETURN---------
model Returns {
  id                    String  @id @default(uuid())
  uniqueId              String
  imeiNumber            String
  ram                   String
  rom                   String
  color                 String
 
  variantId             String
  userId                String
  productId             String
  price                 Int

  supplierId            String
  supplier              Suppliers  @relation(fields: [supplierId], references: [id])

  userReturnProductsId  String
  userReturnProducts    UserReturnProducts @relation(fields: [userReturnProductsId], references: [id])

  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  @@map("returns")
}

model ReturnGroups {
   id                    String  @id @default(uuid())
   supplierId            String
   userId                String
   userReturnProducts    UserReturnProducts[]
   supplierReturnPayments SupplierReturnPayments?
   uniqueId                String @unique
   additionalMoneyBack    AdditionalMoneyBack[]

  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  @@map("returnGroups")
}

// Additional pay in customer
model AdditionalMoneyBack {
  id                          String @id @default(uuid())
  payAmount                   Int
  supplierReturnPaymentId     String
  paymentType                 String?

  returnGroupId               String
  returnGroups                ReturnGroups @relation(fields: [returnGroupId], references: [id])

  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt

  @@map("additionalMoneyBacks")
}

model UserReturnProducts {
  id                    String                  @id @default(uuid())
  productName           String?
  brandName             String?
  modelName             String?
  processor             String?
  unit                  String?
  category              String?
  reOrderAlert          Int?
  productImage          String?
  description           String?
  productStock          Int?                    
  othersStock           Int?
  supplierId            String
  userId                String
  productId             String
  
  returns              Returns[]
 

  returnGroupId           String
  returnGroup            ReturnGroups @relation(fields: [returnGroupId], references: [id])

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  @@map("userReturnProducts")
}

model SupplierReturnPayments {
  id                    String @id @default(uuid())
  quantity              Int
  totalReturnAmount     Int
  totalDue              Int
  totalPay              Int
  paymentType           String?

  supplierId            String 
  userId                String
  productId             String

  user                  User @relation(fields: [userId], references: [id])

  returnGroupId         String @unique
  returnGroup           ReturnGroups @relation(fields: [returnGroupId], references: [id])

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("supplierReturnPayments")

}


//--------PURCHASE GROUP & PURCHASE---------
model Purchase {
  id                    String  @id @default(uuid())
  purchaseRate          Float
  sellingPrice          Float
  discounts             Float?
  vats                  Float?
  totalPrice            Float
  productStock          Int?
  othersStock           Int?
  color                 String?
  uniqueId              String
  ram                   String?
  room                  String?

  supplierId            String
  suppliers             Suppliers @relation(fields: [supplierId], references: [id])

  userId                String
  users                 User @relation(fields: [userId], references: [id])

  productId             String
  products              Product @relation(fields: [productId], references: [id])

  supplierSellId        String
  supplierSells         SupplierSell @relation(fields: [supplierSellId], references: [id])

  supplierSellProductId String @unique
  supplierSellProduct   SupplierSellProduct @relation(fields: [supplierSellProductId], references: [id])

  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  @@map("purchases")
}



model Sells {
  id                String  @id  @default(uuid())
  productName       String
  modelName         String
  vats              Float
  discounts         Float
  sellingPrice      Float
  totalSellPrice    Float
  uniqueId          String
  quantity          Int
  purchaseRate      Float?

  variantId         String
  productId         String

  customerPurchaseProductId String @unique
  customerPurchaseProduct   CustomerPurchaseProducts @relation(fields: [customerPurchaseProductId], references: [id])
  
  customerPurchaseVariantId     String
  customerPurchaseVariants       CustomerPurchaseVariants  @relation(fields: [customerPurchaseVariantId], references: [id])

  userId            String
  user              User @relation(fields: [userId], references: [id])

  customerId        String
  customer          Customers @relation(fields: [customerId], references: [id])

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@map("sells")
}

model SellGroups {
  id                          String @id @default(uuid())

  customerId                  String
  userId                      String
  uniqueId                    String @unique
  customerPurchase            CustomerPurchase? 
  customerPurchaseProducts    CustomerPurchaseProducts[] 
  
  customerPayInUser           CustomerPayInUser[] 

  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt


  @@map("sellGroups")
}

model CustomerPurchaseProducts {
  id                    String                  @id @default(uuid())
  productName           String?
  brandName             String?
  modelName             String?
  processor             String?
  unit                  String?
  category              String?
  reOrderAlert          Int?
  productImage          String?
  description           String?
  productStock          Int?                    
  othersStock           Int?
  customerId            String
  userId                String
  productId             String
  
  variants              CustomerPurchaseVariants[]
  sell                  Sells?

  sellGroupId           String
  sellGroups            SellGroups @relation(fields: [sellGroupId], references: [id])

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  @@map("customerPurchaseProducts")
}

model CustomerPurchaseVariants {
  id                              String     @id @default(uuid())
  imeiNumber                      String
  ram                             String?
  rom                             String?
  color                           String?

  customerPurchaseProductId       String
  product                         CustomerPurchaseProducts @relation(fields: [customerPurchaseProductId], references: [id])
  sells                           Sells[]
  
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@map("customerPurchaseVariants")
}

model CustomerPurchase {
  id                    String @id @default(uuid())
  quantity              Int
  totalPurchaseAmounts  Int
  totalDue              Int
  totalPay              Int
  paymentType           String?

  userId                String

  customerId            String 
  customer              Customers @relation(fields: [customerId], references: [id])

  sellGroupId           String @unique
  sellGroup             SellGroups @relation(fields: [sellGroupId], references: [id])

  

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("customerPurchases")

}

// Additional pay in customer
model CustomerPayInUser {
  id                    String @id @default(uuid())
  payAmount             Int
  customerPurchaseId    String
  paymentType           String?

  sellGroupId           String
  sellGroups            SellGroups @relation(fields: [sellGroupId], references: [id])

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  @@map("customerPayInUsers")
}

// ------------------------------------END SELLs--------------------------------
model Customers {
  id                  String             @id @default(uuid())
  firstName           String
  middleName          String?
  lastName            String
  email               String             @unique
  phoneNo             String             @unique
  nid                 String?
  dateOfBirth         DateTime?          // 🎂 For age verification or personalized marketing
  gender              Gender?            // 🧑‍🦱 Enum: MALE, FEMALE, OTHER

  presentAddress      String?
  permanentAddress    String?
  shippingAddress     String?            // 📦 Optional, in case it's different
  billingAddress      String?            // 💳 Optional, for invoice records

  profileImage        String?
  uniqueId            String
  password            String?

  isEmailVerified     Boolean            @default(false) // ✅ Security
  isPhoneVerified     Boolean            @default(false) // ✅ Security
  status              CustomerStatus     @default(active) // 🚫 ACTIVE, SUSPENDED, BANNED
  role                CustomerRole       @default(customer)

  referralCode        String?            // 🧾 Optional: used in referral systems
  referredBy          String?            // 🎁 Who referred this customer (user ID)
  loyaltyPoints       Int                @default(0)      // ⭐ Points earned from purchases
  newsletterOptIn     Boolean            @default(true)   // 📨 For promotional emails

  provider            String?            // 🔐 External login provider: google, facebook
  providerId          String?            // 🔐 Provider-specific user ID

  lastLogin           DateTime?          // 🕓 Track login activity
  lastPurchaseDate    DateTime?          // 🛍 Track recent purchases

  deviceTokens        String[]           // 📱 For push notifications
  ipHistory           String[]           // 🌍 List of IPs used
  userAgentHistory    String[]           // 🖥 For security logging

  purchaseHistory     Sells[]
  payments            CustomerPayments[]
  customerPurchase    CustomerPurchase[]
  addToCart           AddToCart[]
  Review Review[]

  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  @@map("customers")
}


model CustomerPayments {
  id                   String  @id @default(uuid())
  totalPay             Float
  totalDue             Float
  totalSellPrice       Float
  uniqueId             String
  paymentType          String?

  customerId           String
  customer             Customers @relation(fields: [customerId], references: [id])

  userId               String  
  user                 User     @relation(fields: [userId], references: [id])

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("customerPayments")
}

model Vats {
  id                   String  @id @default(uuid())

  name                 String
  vatType              String
  vatValue             Float
  uniqueId             String

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("vats")
}

model Discounts {
  id                   String  @id @default(uuid())

  name                 String
  discountType         String
  discountValue        Float
  uniqueId             String

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("discounts")
}

model Brands {
  id                   String  @id @default(uuid())

  brandName            String
  description          String?
  uniqueId             String     @unique

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("brands")
}
model Units {
  id                   String  @id @default(uuid())

  unitName            String

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("units")
}

model Colors {
  id                   String  @id @default(uuid())

  name                 String
  colorCode            String?
  uniqueId             String

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("colors")
}

model CurrencyType {
  id                   String  @id @default(uuid())

  currencyName                 String
  uniqueId             String

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("currencyType")
}

model SupplierSell {
  id                    String @id @default(uuid())
  quantity              Int
  totalSellAmounts      Float
  totalDue              Float
  totalPay              Float
  paymentType           String?

  supplierId            String 
  userId                String
  productId             String


  product               Product @relation(fields: [productId], references: [id])
  supplier              Suppliers @relation(fields: [supplierId], references: [id])
  user                  User @relation(fields: [userId], references: [id])

  purchase              Purchase[]

  purchaseGroupId       String @unique
  purchaseGroup         PurchaseGroup @relation(fields: [purchaseGroupId], references: [id])

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("supplierSells")

}


model SupplierSellProduct {
  id                    String                  @id @default(uuid())
  productName           String?
  brandName             String?
  modelName             String?
  processor             String?
  unit                  String?
  category              String?
  reOrderAlert          Int?
  productImage          String?
  description           String?
  productStock          Int?                    
  othersStock           Int?
  
  variants              SupplierSellVariants[]

  purchase              Purchase?
  
  purchaseGroupId       String
  purchaseGroup         PurchaseGroup @relation(fields: [purchaseGroupId], references: [id])

  userId                String
  productId             String

  supplierId            String
  supplier              Suppliers               @relation(fields: [supplierId], references: [id])

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  @@map("supplierSellProducts")
}


model SupplierSellVariants {
  id                              String     @id @default(uuid())
  imeiNumber                      String
  ram                             String?
  rom                             String?
  color                           String?

  supplierSellProductId           String
  product                         SupplierSellProduct @relation(fields: [supplierSellProductId], references: [id])
    
  // supplierSellId     String
  // supplierSell       SupplierSell    @relation(fields: [supplierSellId], references: [id])


  
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@map("supplierSellVariants")
}

model PurchaseGroup {
  id                    String                  @id @default(uuid())
  supplierId            String
  userId                String
  supplierSellProducts  SupplierSellProduct[] 
  uniqueId              String @unique
  supplierSells         SupplierSell? 
  payInSupplier         PayInSupplier[]

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  @@map("purchaseGroups")
}

// Additional pay in supplier
model PayInSupplier {
  id                    String @id @default(uuid())
  payAmount             Int
  supplierSellId        String
  paymentType           String?

  purchaseGroupId       String
  purchaseGroups        PurchaseGroup @relation(fields: [purchaseGroupId], references: [id])

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  @@map("payInSuppliers")
}

model AdditionalExpenses {
  id                    String @id @default(uuid())
  expenseAmount         Float
  details               String
  uniqueId              String @unique

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  @@map("additionalExpenses")
}


model Warranty {
  id                    String @id @default(uuid())
  status                Boolean @default(true)
  uniqueId              String
  imei                  String
  email                 String
  model                 String
  name                  String
  phone                 String
  purchaseDate          String
  issueSubmitDate       String
  purchasePlace         String
  repairHistory         String
  issue                 String
  repairCount           Int
  deliveryTime          String?

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  @@map("warranties")

}



model Shop {
  id              String @id @default(uuid())
  shopName        String
  location        String
  owner           String
  phone           String    @unique
  email           String    @unique
  website         String?
  hours           String
  type            String    
  products        String?
  establishedDate String
  aboutShop       String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  @@map("shops")
}






// -----------------------------------------------------------------------------------------------
//                                    PRODUCTS APIs INFORMATIONS
// -----------------------------------------------------------------------------------------------

model Categorys {
  id        String     @id @default(uuid())
  name      String
  slug      String     @unique
  parentId  String?
  parent    Categorys?  @relation("CategoryParent", fields: [parentId], references: [id])
  children  Categorys[] @relation("CategoryParent")
  products  Product[]


  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("categories")
}

model Product {
  id            String     @id @default(uuid())
  productName   String
  brandName     String
  modelName     String

  slug          String         @unique
  price         Float
  originalPrice Float?
  discount      Float?
  rating        Float          @default(0)
  reviewsCount  Int            @default(0)
  stock         Int?
  isNew         Boolean        @default(false)
  isFeatured    Boolean        @default(false)
  isBestSeller  Boolean        @default(false)
  description   String?
  features      String[]       // List of features
  images        String[]       // Multiple images
  image         String
  featureImage  String?
  status        ProductStatus  @default(ACTIVE)
  specs         Json?          // Category-specific attributes (RAM, size, color, etc.)
  tags          String[]

  categoryId String
  
  processor     String?
  unit          String
  reOrderAlert  Int
  productImage  String?
  uniqueId      String?
  othersStock   Int?

  variants      Variants[]
  purchases     Purchase[]
  supplierSells SupplierSell[]
  AddToCart AddToCart[]
  category   Categorys @relation(fields: [categoryId], references: [id])

  reviews    Review[]
  faqs       FAQ[]
   

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("products")
}



// =====================
// VARIANT
// =====================
model Variants {
  id        String  @id @default(uuid())
  sku       String?  @unique
  imeiNumber String?
  color     String?
  size      String?
  ram       String?
  rom       String?
  price     Float
  stock     Int
  productId String
  product   Product @relation(fields: [productId], references: [id])

  purchaseId    String

  status        String     @default("available")
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("variants")
}


// =====================
// REVIEW
// =====================
model Review {
  id        String   @id @default(uuid())
  rating    Float
  title     String?
  content   String
  verified  Boolean  @default(false)
  
  // Relations
  productId String
  product   Product  @relation(fields: [productId], references: [id])

  customerId String
  customer   Customers @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}


// =====================
// FAQ
// =====================
model FAQ {
  id        String   @id @default(uuid())
  user      String
  question  String
  date      DateTime @default(now())
  answers   Answer[]
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}

// =====================
// FAQ Answer
// =====================
model Answer {
  id     String @id @default(uuid())
  user   String
  answer String
  date   DateTime @default(now())
  faqId  String
  faq    FAQ @relation(fields: [faqId], references: [id])
}


// -----------------------------------------------------------------------------------------------
//                                    WEBSITE PART APIs INFORMATIONS
// -----------------------------------------------------------------------------------------------

model AddToCart {
  id         String    @id @default(uuid())
  customerId String
  productId  String
  quantity   Int       @default(1)
  status     CartStatus

  // Relations
  customer   Customers @relation(fields: [customerId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])

  @@unique([customerId, productId])


  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  @@map("add_to_cart")
}



// -----------------------------------------------------------------------------------------------
//                                    ALL ENUM INFO
// -----------------------------------------------------------------------------------------------

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
  OUT_OF_STOCK
}

// Enum value
enum CustomerRole {
  customer        
  visitor
}
enum CartStatus {
  cart        
  wishlist
}


enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}


// Enum value
enum UserRole {
  super_admin        
  admin
  user
  moderator
  content_manager    
  marketing_manager  
}
// Enum value
enum CustomerStatus {
  active        
  suspended
  banned
}
enum Gender {
  male        
  female
  others
}
